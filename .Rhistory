require(rpart)
model2 <- rpart(Churn_Rate~., method = "class" ,  data=data11)
plotcp(model2)
printcp(model2)
head(data11)
plot(model, uniform=TRUE,
main="Claim Classification")
head(data2)
data2["Tenure_Group"]<- "12+"
head(data2)
data$Tenure_Group <- ifelse(tenure <3, "Less than 3")
data2$Tenure_Group <- ifelse(tenure <3, "Less than 3")
data2$Tenure_Group <- ifelse(data2$tenure <3, "Less than 3")
data2$Tenure_Group <- ifelse(data2$tenure <3, yes="Less than 3")
data2$Tenure_Group <- ifelse(data2$tenure <3, yes="Less than 3", no = "12+")
head(data2)
data2$Tenure_Group <- ifelse(data2$tenure >=3 data2$tenure <6& , yes="3-6", no = "12+")
data2$Tenure_Group <- ifelse(data2$tenure >=3 & data2$tenure <6 , yes="3-6", no = "12+")
data2$Tenure_Group <- ifelse(data2$tenure >=3 & data2$tenure <6 , yes="3-<6", no = "12+")
data2$Tenure_Group <- ifelse(data2$tenure >=6 & data2$tenure <9 , yes="3-<9", no = "12+")
data2$Tenure_Group <- ifelse(data2$tenure >=6 & data2$tenure <9 , yes="6-<9", no = "12+")
data2$Tenure_Group <- ifelse(data2$tenure >=9 & data2$tenure <12 , yes="9-<12", no = "12+")
hist(data2,Tenure_Group, breaks =10)
library()
library(survival)
data(aml)
library(help*survival)
library(help=survival)
update.packages(ask='graphics',checkBuilt=TRUE)
data(aml)
survdiff(formula = surv(time,event) ~group, data=g3)
data("glioma", package = "coin")
utils:::menuInstallPkgs()
data("glioma", package = "coin")
layout(matrix(1:2, ncol=2))
g3 <- subset(glioma, histology == "Grade3")
plot(survfit(Surv(time, event) ~ group, data = g3),
+ main = "Grade III Glioma", lty = c(2, 1),
+ ylab = "Probability", xlab = "Survival Time in Month",
+ legend.bty = "n", legend.text = c("Control", "Treated")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
library(iswr)
library(ISwR)
data(melanom)
str(melanom)
msurv <- with(melanom, Surv(days,status ==1))
msurv
mfit <- survfit(Surv(days, status ==1), data = melanom)
mfit <- survfit(formula = Surv(days, status ==1), data = melanom)
mfit <- survfit(Surv(days, status == 1), data = melanom)
mfit.bysex <- survfit(Surv(days, status == 1) ~ sex, data = melanom)
mfit.bysex
plot(mfit.bysex)
plot(mfit.bysex, conf.int= TRUE, col =c("black", "grey"),lty=1:2, legend.text = c("Female", "Male"))
utils:::menuInstallPkgs()
data(aml)
data(psych)
install.packages("OIsurv")
data(aids)
library(help=kmsurv)
library(help=KMsurv)
library(KMsurv)
data(aids)
aids
attach(aids)
infect
data(tongue)
attach(tongue)
my.surv.object <- Surv(time[type==1], delta[type ==1])
my.surv.object
data(btrial)
btrial
btrial
my.surv.object <- Surv(time[type==1], delta[type ==1])
mydata = USArrests
mydata
mydata <- na.omit(mydata)
mydata <- scale(mydata)
mydata
d<- dist(mydata, method = "euclidean")
fit <- hclust(d,method ="ward")
plot(fit)
k1 = 2
groups <- cutree(fit,k=k1)
rect.hclust(fit,k=k1,border = "red")
k1 = 5
groups <- cutree(fit,k=k1)
rect.hclust(fit,k=k1,border = "red")
# Determine number of clusters #
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
m <- matrix(nrow =2, ncol=3)
m
v1 <- 1:10
v1
dim(m)
x <- 1:2
y <- 3:4
x
y
cbind(x,y)
cbind(y,y)
cbind(y,x)
rbind(y,x)
x <- factor(c("yes", "no","yes", "no"))
x
table(x)
unclass(x)
x <- c(1,2,NA,10,3)
is.na(x)
is.nan(x)
x<- data.frame(foo=1:4, bar = c(T,T,F,F))
x
nrow(x)
ncol(x)
x <- 1:3
names(x)
names(x) <- c("what", "the", "fuck")
x
m <- matrix(1:4, nrow=2, ncol=2)
dimnames(m) <- list(c("a","b"),c("c","d"))
m
names(x) <- r("what", "the", "fuck")
y <- data.frame(a=1, b="a")
dput(y)
y
dput(y, file="y.R")#save to file instead of printing it
new.y <- dget("y.R")#read back into R using dget
new.y
con <- file("foo.txt", "r")
data <- read.csv(con)
close(con)
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
head(x)
x
getwd()
dir
dir()
source("data.R")
source("data.R")
second <- function(x) {x + rnorm(lenght(x))
}
second
second <- function(x) {x + rnorm(length(x))}
second(4)
second(4:10)
rnorm(0)
third <- function(x,) { y^3 + sqrt(x)}
third <- function(x,y) { y^3 + sqrt(x)}
third(x,y) <- function(x,y) { y^3 + sqrt(x)}
third <- function(x,y) { y^3 + sqrt(x)}
third(2,4)
third(0,0)
third(1,1)
third(1,4)
third <- function(x,y) { y^3 + x^0.5}
third(1,4)
x <- rnorm(100,2,4)
summary(x)
str(x)
f <- gl(40,10)
str(f)
summary(f)
library(datasets(
)
)
library(datasets)
head(airquality, n=10)
str(airquality)
m <- matrix(rnorm(100),10,10)
str(m)
m[,1]
s<- split(airquality, airquality$Month)
s
str(S)
str(s)
for (i in 1: 10 ) { print(i) }
for (i in 1: 10 ) { print(i^3) }
x <- matrix(1:6, 2, 3)
x
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j])
}
}
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j])
}
}
for(i in seq_len(ncol(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j])
}
}
for(i in seq_len(ncol(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j])
}
}
for(i in seq_len(ncol(x))) {
for(j in seq_len(nrow(x))) {
print(x[i,j])
}
}
count <- 0
while(count<10) { print(count) count < - count+1)}
while(count<10) { print(count) count < - count+1}
while(count<10) { print(count) count < - count+1}
while (count < 10)
print(count)
break
f<- function(a, b=1, c=2, d=NULL) {
}
f
f <- function(a,b) { a^2}
f(3)
args(paste)
paste("a","b", se=":")
args(cat)
args(plot)
plot( f(2:9))
source("C:\\Users\\davis.balaba\\Desktop\\Analytics\\R\\Computing for Data Analysis\\Computing for Data Analysis\\Lecture 2.03 - Scoping Rules.R")
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
power
pow
power(n)
power(3)
x <- list(a=1:5, b=rnorm(10))
lapply(x,mean)
x
x <- list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
x
lapply(x,function(elt) elt[,1])
lapply(x,function(elt) elt[1,])
x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1,), d=rnorm(100,5))
sapply(x, mean)
mean(x)
a
x<-c(1,3,5)
y<-c(3,2,10)
rbind(x,y)
x<- list(2, "a", TRUE)
x[[2]]
x<-1:4
y<- 2:3
x+y
x<- c(3,5,1,10,12,6)
x[x==0] <-6
x
x[x<-5] <-0
x
x[x<=5] <-0
x
load("C:\\Users\\davis.balaba\\Documents\\R\\Practice.RData")
ls
data1 <- read.csv("C:/Users/davis.balaba/Documents/IR/VZW/vzw_cr1.csv", header = TRUE)data1 <- read.csv("C:/Users/davis.balaba/Documents/IR/VZW/vzw_cr1.csv", header = TRUE)data1 <- read.csv("C:/Users/davis.balaba/Documents/IR/VZW/vzw_cr1.csv", header = TRUE)
data1 <- read.csv("C://Users//davis.balaba//Documents//R//hw1_data.csv", header = TRUE)
data1
data1[1:2,]
data1[152:153,]
data1[47,]
bad <- is.na(data1[1,])
bad
bad <- is.na(data1[,1])
bad
sum(!bad)
sum(bad)
mean(data1[!bad])
mean(data1[!bad],1)
mean(data1[!bad],1])
mean(data1[!bad,1])
data1[data1[,1]>31]
data1[data1[,1]>31,]
b<-data1[data1[,1]>31,]
c<- is.na(b)
c<- is.na(b[,1])
d<-data1[!c,]
d
c
e<- c(c[,4]>90,)
e<-data1[data1[,4]>90,]
e
mean(e[,2])
bad <- is.na(e[,1])
bad
f <- e[!bad,]
f
mean(f[,2])
g<- data1[data1[,5]==5,]
g
mean(g[,4])
g<- data1[data1[,5]==6,]
g
mean(g[,4])
load("C:\\Users\\davis.balaba\\Documents\\R_Coursera.RData")
if(x>3) {y<-10} else {y<-15}
x=10
x
if(x>3) {y<-10} else {y<-15}
y
for(i in 1:10) { print(i) }
#seq_along(x) creates integer based on length of x
for (i in seq_along(x)) print(x[i])
x<- list(a+1:5, b= rnorm(10))
x<- list(a=1:5, b= rnorm(10))
lapply(x,mean)
x
x<- list(a= matrix(1:4, 2,2), b= matrix(1:5,3,2))
x<- list(a= matrix(1:4, 2,2), b= matrix(1:6,3,2))
lapply(x,function(elt) elt[,1])
x<- list(a=1:4, b= rnorm(10), c=rnorm(20), d=rnorm(100,5))
lapply(x,mean)
sapply(x,mean)
x<- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,2,sum)
apply(x,2,range)
apply(x,1,mean)
apply(x,1,range)
a <- array(rnorm(2*2*10), c(2,2,10))
a
apply(a,c(1,2), mean)
a<- matrix(1:4, c(2,2))
a
b<- matrix(5:8, c(2,2))
b
rowmeans(a)
rowMeans(a)
b<- matrix(5:11, c(2,2,2))
b<- matrix(5:12, c(2,2,2))
b
rowMeans(b)
rowMeans(b, dims=2)
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f<- gl(3,10)
str(gl)
f
tapply(x,f,mean)
tapply(x,f,range)
split(x,f)
m<-split(x,f)
m[,1]
m[[,1]]
library(datasets)
head(airquality)
s<- split(airquality, airquality$Month)
lapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R"),"Wind"]))
lapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R","Wind")]))
lapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R","Wind")], na.rm=TRUE))
x<-rnorm(10)
f1<- gl(2,5)
f2<- gl(5,2)
interaction(f1,f2)
split(x,list(f1,f2))
split(x,list(f1,f2), drop = TRUE)
a<-list (rep(1,4), rep(2,3), rep(3,2), rep(4,1))
a
mapply(rep, 1:4, 4:1)
add2
}
func2(1)
add2(1)
func2<- function(x) {
if(x>0)
print ("x is >0")
else
print ("x is < 0")
invisible(x)
}
func2(1)
mean(x)
mean(z)
traceback()
lm(y-z)
traceback()
denug(lm)
debug(lm)
lm(y-z)
read.csv("nosuchfile")
options(error=recover)
read.csv("nosuchfile")
2
5
67
3
1
0
exit
library(datasets)
data(iris)
?iris
head(iris)
lapply(s,function(iris) colMeans(iris[,c("Species"]))
lapply(s,function(iris) colMeans(iris[,c("Species")]))
split(iris,"Species")
v<-split(iris,"Species")
v
lapply(iris,function(x) colMeans(x[,c("Sepal.Length")], na.rm=TRUE))
str(v)
args(v)
spec <- c("setosa", "versicolor", "virginica")
spec
v<-split(iris,spec)
v
spec <- array("setosa", "versicolor", "virginica")
spec <- list("setosa", "versicolor", "virginica")
spec
v<-split(iris,spec)
v
colMeans(iris)
apply(iris[,1:4],2,mean)
sp < - split(iris, iris$species)
head(iris)
sp < - split(iris, iris$Species)
sp <- split(iris, iris$Species)
sp
sp[[3]]
apply(iris([,1], 2, mean))
apply(iris[,1], 2, mean)
apply(iris[,1:4], 2, mean)
data(mtcars)
?mtcars
head(mtcars)
mtcars
sapply(mtcars,cyl, mean)
tapply(mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg,cyl,mean))
with(mtcars, tapply(hp,cyl,mean))
debug(ls)
ls
options(error=?)
options(error= defualt)
options(error= default)
mean(x)
x
options
debug(ls)
ls
library(datasets)
data(iris)
head
library(datasets)
data(iris)
head
head
utils:::menuInstallPkgs()
q()
install.packages("rpart")
install.packages("devtools")
install.packages("KernSmooth")
library(kernsmooth)
kernsmooth
library(KernSmooth)
clear
Clear
ls
x
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
e
y
setwd("C:/Users/davis.balaba/Desktop/Coursera/specdata")
source(submit())
source("submitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
dir()
source("submitscript1.R")
submit()
r <- matrix(rnorm(10),5,2)
r
c <- matrix( 1 -0.25, -0.25,1)
c
c <- matrix(c( 1, -0.25), c(-0.25,1))
c <- rbind(c( 1, -0.25), c(-0.25,1))
c
solve(c)
c*solve(c)
solve(c)*c
solve(c)%*%c
setinv <- function(solve) m <<- solve
source("cachematrix.R")
dir()
setwd("C:/Users/davis.balaba/Desktop/Coursera/ProgrammingAssignment2")
source("cachematrix.R")
str(cacheSolve)
str(makeCacheMatrix)
b <- matrix(rnorm(25),5,5)
b
s <- makeCacheMatrix ( x =matrix(rnorm(25),5,5) )
s
cacheSolve(x)
source("cachevector.R")
makeVector(x=(1,2,3,4))
makeVector(x=(1:4))
cachemean(x)
